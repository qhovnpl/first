// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "PowerStorage.h"
#include "FileObject.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TNonblockingServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/concurrency/ThreadManager.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;

using namespace boost;
using namespace ::PowerStorage;

FileObject fileObject;

class PowerStorageHandler : virtual public PowerStorageIf {
public:
	void add(const int64_t srcID, const int64_t dstID, const int64_t pos) {
		printf("add\n");
		fileObject.add(srcID, dstID, pos);
	}

	void remove(const int64_t srcID, const int64_t dstID) {
		printf("remove\n");
		fileObject.remove(srcID, dstID);
	}
	
	void selectOne(std::vector<Edge> & _return, const int64_t srcID, const int64_t dstID) {
		printf("selectOne\n");
		_return = fileObject.selectOne(srcID, dstID);
	}

	void selectFrom(std::vector<Edge> & _return, const int64_t srcID) {
		printf("selectFrom\n");
		_return = fileObject.selectFrom(srcID);
	}

	void selectTo(std::vector<Edge> & _return, const int64_t dstID) {
		printf("selectTo\n");
		_return = fileObject.selectTo(dstID);
	}
};

int main(int argc, char **argv) {
	int port = 1410;
	boost::shared_ptr<PowerStorageHandler> handler(new PowerStorageHandler());
	boost::shared_ptr<TProcessor> processor(new PowerStorageProcessor(handler));
	boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
  
	boost::shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(10);
	boost::shared_ptr<PosixThreadFactory> threadFactory = boost::shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
	threadManager->threadFactory(threadFactory);
	threadManager->start();
	TNonblockingServer server(processor, protocolFactory, port, threadManager);
	server.serve();

	return 0;
}

