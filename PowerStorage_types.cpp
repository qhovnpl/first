/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "PowerStorage_types.h"

#include <algorithm>

namespace PowerStorage {

int _kEdgeStateValues[] = {
  EdgeState::Positive,
  EdgeState::Negative,
  EdgeState::Removed,
  EdgeState::Archived
};
const char* _kEdgeStateNames[] = {
  "Positive",
  "Negative",
  "Removed",
  "Archived"
};
const std::map<int, const char*> _EdgeState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kEdgeStateValues, _kEdgeStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Edge::ascii_fingerprint = "4065EDEF6EACF4EBD9E43C9AB52197F9";
const uint8_t Edge::binary_fingerprint[16] = {0x40,0x65,0xED,0xEF,0x6E,0xAC,0xF4,0xEB,0xD9,0xE4,0x3C,0x9A,0xB5,0x21,0x97,0xF9};

uint32_t Edge::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->srcID);
          this->__isset.srcID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dstID);
          this->__isset.dstID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->pos);
          this->__isset.pos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->status = (EdgeState::type)ecast0;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Edge::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Edge");

  xfer += oprot->writeFieldBegin("srcID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->srcID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dstID", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->dstID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->pos);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Edge &a, Edge &b) {
  using ::std::swap;
  swap(a.srcID, b.srcID);
  swap(a.dstID, b.dstID);
  swap(a.pos, b.pos);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

} // namespace
