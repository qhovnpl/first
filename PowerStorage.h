/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PowerStorage_H
#define PowerStorage_H

#include <thrift/TDispatchProcessor.h>
#include "PowerStorage_types.h"

namespace PowerStorage {

class PowerStorageIf {
 public:
  virtual ~PowerStorageIf() {}
  virtual void add(const int64_t srcID, const int64_t dstID, const int64_t pos) = 0;
  virtual void remove(const int64_t srcID, const int64_t dstID) = 0;
  virtual void selectOne(std::vector<Edge> & _return, const int64_t srcID, const int64_t dstID) = 0;
  virtual void selectFrom(std::vector<Edge> & _return, const int64_t srcID) = 0;
  virtual void selectTo(std::vector<Edge> & _return, const int64_t dstID) = 0;
};

class PowerStorageIfFactory {
 public:
  typedef PowerStorageIf Handler;

  virtual ~PowerStorageIfFactory() {}

  virtual PowerStorageIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PowerStorageIf* /* handler */) = 0;
};

class PowerStorageIfSingletonFactory : virtual public PowerStorageIfFactory {
 public:
  PowerStorageIfSingletonFactory(const boost::shared_ptr<PowerStorageIf>& iface) : iface_(iface) {}
  virtual ~PowerStorageIfSingletonFactory() {}

  virtual PowerStorageIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PowerStorageIf* /* handler */) {}

 protected:
  boost::shared_ptr<PowerStorageIf> iface_;
};

class PowerStorageNull : virtual public PowerStorageIf {
 public:
  virtual ~PowerStorageNull() {}
  void add(const int64_t /* srcID */, const int64_t /* dstID */, const int64_t /* pos */) {
    return;
  }
  void remove(const int64_t /* srcID */, const int64_t /* dstID */) {
    return;
  }
  void selectOne(std::vector<Edge> & /* _return */, const int64_t /* srcID */, const int64_t /* dstID */) {
    return;
  }
  void selectFrom(std::vector<Edge> & /* _return */, const int64_t /* srcID */) {
    return;
  }
  void selectTo(std::vector<Edge> & /* _return */, const int64_t /* dstID */) {
    return;
  }
};

typedef struct _PowerStorage_add_args__isset {
  _PowerStorage_add_args__isset() : srcID(false), dstID(false), pos(false) {}
  bool srcID;
  bool dstID;
  bool pos;
} _PowerStorage_add_args__isset;

class PowerStorage_add_args {
 public:

  PowerStorage_add_args() : srcID(0), dstID(0), pos(0) {
  }

  virtual ~PowerStorage_add_args() throw() {}

  int64_t srcID;
  int64_t dstID;
  int64_t pos;

  _PowerStorage_add_args__isset __isset;

  void __set_srcID(const int64_t val) {
    srcID = val;
  }

  void __set_dstID(const int64_t val) {
    dstID = val;
  }

  void __set_pos(const int64_t val) {
    pos = val;
  }

  bool operator == (const PowerStorage_add_args & rhs) const
  {
    if (!(srcID == rhs.srcID))
      return false;
    if (!(dstID == rhs.dstID))
      return false;
    if (!(pos == rhs.pos))
      return false;
    return true;
  }
  bool operator != (const PowerStorage_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PowerStorage_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PowerStorage_add_pargs {
 public:


  virtual ~PowerStorage_add_pargs() throw() {}

  const int64_t* srcID;
  const int64_t* dstID;
  const int64_t* pos;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PowerStorage_add_result {
 public:

  PowerStorage_add_result() {
  }

  virtual ~PowerStorage_add_result() throw() {}


  bool operator == (const PowerStorage_add_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PowerStorage_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PowerStorage_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PowerStorage_add_presult {
 public:


  virtual ~PowerStorage_add_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PowerStorage_remove_args__isset {
  _PowerStorage_remove_args__isset() : srcID(false), dstID(false) {}
  bool srcID;
  bool dstID;
} _PowerStorage_remove_args__isset;

class PowerStorage_remove_args {
 public:

  PowerStorage_remove_args() : srcID(0), dstID(0) {
  }

  virtual ~PowerStorage_remove_args() throw() {}

  int64_t srcID;
  int64_t dstID;

  _PowerStorage_remove_args__isset __isset;

  void __set_srcID(const int64_t val) {
    srcID = val;
  }

  void __set_dstID(const int64_t val) {
    dstID = val;
  }

  bool operator == (const PowerStorage_remove_args & rhs) const
  {
    if (!(srcID == rhs.srcID))
      return false;
    if (!(dstID == rhs.dstID))
      return false;
    return true;
  }
  bool operator != (const PowerStorage_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PowerStorage_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PowerStorage_remove_pargs {
 public:


  virtual ~PowerStorage_remove_pargs() throw() {}

  const int64_t* srcID;
  const int64_t* dstID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PowerStorage_remove_result {
 public:

  PowerStorage_remove_result() {
  }

  virtual ~PowerStorage_remove_result() throw() {}


  bool operator == (const PowerStorage_remove_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PowerStorage_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PowerStorage_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PowerStorage_remove_presult {
 public:


  virtual ~PowerStorage_remove_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PowerStorage_selectOne_args__isset {
  _PowerStorage_selectOne_args__isset() : srcID(false), dstID(false) {}
  bool srcID;
  bool dstID;
} _PowerStorage_selectOne_args__isset;

class PowerStorage_selectOne_args {
 public:

  PowerStorage_selectOne_args() : srcID(0), dstID(0) {
  }

  virtual ~PowerStorage_selectOne_args() throw() {}

  int64_t srcID;
  int64_t dstID;

  _PowerStorage_selectOne_args__isset __isset;

  void __set_srcID(const int64_t val) {
    srcID = val;
  }

  void __set_dstID(const int64_t val) {
    dstID = val;
  }

  bool operator == (const PowerStorage_selectOne_args & rhs) const
  {
    if (!(srcID == rhs.srcID))
      return false;
    if (!(dstID == rhs.dstID))
      return false;
    return true;
  }
  bool operator != (const PowerStorage_selectOne_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PowerStorage_selectOne_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PowerStorage_selectOne_pargs {
 public:


  virtual ~PowerStorage_selectOne_pargs() throw() {}

  const int64_t* srcID;
  const int64_t* dstID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PowerStorage_selectOne_result__isset {
  _PowerStorage_selectOne_result__isset() : success(false) {}
  bool success;
} _PowerStorage_selectOne_result__isset;

class PowerStorage_selectOne_result {
 public:

  PowerStorage_selectOne_result() {
  }

  virtual ~PowerStorage_selectOne_result() throw() {}

  std::vector<Edge>  success;

  _PowerStorage_selectOne_result__isset __isset;

  void __set_success(const std::vector<Edge> & val) {
    success = val;
  }

  bool operator == (const PowerStorage_selectOne_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PowerStorage_selectOne_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PowerStorage_selectOne_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PowerStorage_selectOne_presult__isset {
  _PowerStorage_selectOne_presult__isset() : success(false) {}
  bool success;
} _PowerStorage_selectOne_presult__isset;

class PowerStorage_selectOne_presult {
 public:


  virtual ~PowerStorage_selectOne_presult() throw() {}

  std::vector<Edge> * success;

  _PowerStorage_selectOne_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PowerStorage_selectFrom_args__isset {
  _PowerStorage_selectFrom_args__isset() : srcID(false) {}
  bool srcID;
} _PowerStorage_selectFrom_args__isset;

class PowerStorage_selectFrom_args {
 public:

  PowerStorage_selectFrom_args() : srcID(0) {
  }

  virtual ~PowerStorage_selectFrom_args() throw() {}

  int64_t srcID;

  _PowerStorage_selectFrom_args__isset __isset;

  void __set_srcID(const int64_t val) {
    srcID = val;
  }

  bool operator == (const PowerStorage_selectFrom_args & rhs) const
  {
    if (!(srcID == rhs.srcID))
      return false;
    return true;
  }
  bool operator != (const PowerStorage_selectFrom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PowerStorage_selectFrom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PowerStorage_selectFrom_pargs {
 public:


  virtual ~PowerStorage_selectFrom_pargs() throw() {}

  const int64_t* srcID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PowerStorage_selectFrom_result__isset {
  _PowerStorage_selectFrom_result__isset() : success(false) {}
  bool success;
} _PowerStorage_selectFrom_result__isset;

class PowerStorage_selectFrom_result {
 public:

  PowerStorage_selectFrom_result() {
  }

  virtual ~PowerStorage_selectFrom_result() throw() {}

  std::vector<Edge>  success;

  _PowerStorage_selectFrom_result__isset __isset;

  void __set_success(const std::vector<Edge> & val) {
    success = val;
  }

  bool operator == (const PowerStorage_selectFrom_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PowerStorage_selectFrom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PowerStorage_selectFrom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PowerStorage_selectFrom_presult__isset {
  _PowerStorage_selectFrom_presult__isset() : success(false) {}
  bool success;
} _PowerStorage_selectFrom_presult__isset;

class PowerStorage_selectFrom_presult {
 public:


  virtual ~PowerStorage_selectFrom_presult() throw() {}

  std::vector<Edge> * success;

  _PowerStorage_selectFrom_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PowerStorage_selectTo_args__isset {
  _PowerStorage_selectTo_args__isset() : dstID(false) {}
  bool dstID;
} _PowerStorage_selectTo_args__isset;

class PowerStorage_selectTo_args {
 public:

  PowerStorage_selectTo_args() : dstID(0) {
  }

  virtual ~PowerStorage_selectTo_args() throw() {}

  int64_t dstID;

  _PowerStorage_selectTo_args__isset __isset;

  void __set_dstID(const int64_t val) {
    dstID = val;
  }

  bool operator == (const PowerStorage_selectTo_args & rhs) const
  {
    if (!(dstID == rhs.dstID))
      return false;
    return true;
  }
  bool operator != (const PowerStorage_selectTo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PowerStorage_selectTo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PowerStorage_selectTo_pargs {
 public:


  virtual ~PowerStorage_selectTo_pargs() throw() {}

  const int64_t* dstID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PowerStorage_selectTo_result__isset {
  _PowerStorage_selectTo_result__isset() : success(false) {}
  bool success;
} _PowerStorage_selectTo_result__isset;

class PowerStorage_selectTo_result {
 public:

  PowerStorage_selectTo_result() {
  }

  virtual ~PowerStorage_selectTo_result() throw() {}

  std::vector<Edge>  success;

  _PowerStorage_selectTo_result__isset __isset;

  void __set_success(const std::vector<Edge> & val) {
    success = val;
  }

  bool operator == (const PowerStorage_selectTo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PowerStorage_selectTo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PowerStorage_selectTo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PowerStorage_selectTo_presult__isset {
  _PowerStorage_selectTo_presult__isset() : success(false) {}
  bool success;
} _PowerStorage_selectTo_presult__isset;

class PowerStorage_selectTo_presult {
 public:


  virtual ~PowerStorage_selectTo_presult() throw() {}

  std::vector<Edge> * success;

  _PowerStorage_selectTo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PowerStorageClient : virtual public PowerStorageIf {
 public:
  PowerStorageClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PowerStorageClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add(const int64_t srcID, const int64_t dstID, const int64_t pos);
  void send_add(const int64_t srcID, const int64_t dstID, const int64_t pos);
  void recv_add();
  void remove(const int64_t srcID, const int64_t dstID);
  void send_remove(const int64_t srcID, const int64_t dstID);
  void recv_remove();
  void selectOne(std::vector<Edge> & _return, const int64_t srcID, const int64_t dstID);
  void send_selectOne(const int64_t srcID, const int64_t dstID);
  void recv_selectOne(std::vector<Edge> & _return);
  void selectFrom(std::vector<Edge> & _return, const int64_t srcID);
  void send_selectFrom(const int64_t srcID);
  void recv_selectFrom(std::vector<Edge> & _return);
  void selectTo(std::vector<Edge> & _return, const int64_t dstID);
  void send_selectTo(const int64_t dstID);
  void recv_selectTo(std::vector<Edge> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PowerStorageProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PowerStorageIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PowerStorageProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_selectOne(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_selectFrom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_selectTo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PowerStorageProcessor(boost::shared_ptr<PowerStorageIf> iface) :
    iface_(iface) {
    processMap_["add"] = &PowerStorageProcessor::process_add;
    processMap_["remove"] = &PowerStorageProcessor::process_remove;
    processMap_["selectOne"] = &PowerStorageProcessor::process_selectOne;
    processMap_["selectFrom"] = &PowerStorageProcessor::process_selectFrom;
    processMap_["selectTo"] = &PowerStorageProcessor::process_selectTo;
  }

  virtual ~PowerStorageProcessor() {}
};

class PowerStorageProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PowerStorageProcessorFactory(const ::boost::shared_ptr< PowerStorageIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PowerStorageIfFactory > handlerFactory_;
};

class PowerStorageMultiface : virtual public PowerStorageIf {
 public:
  PowerStorageMultiface(std::vector<boost::shared_ptr<PowerStorageIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PowerStorageMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PowerStorageIf> > ifaces_;
  PowerStorageMultiface() {}
  void add(boost::shared_ptr<PowerStorageIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add(const int64_t srcID, const int64_t dstID, const int64_t pos) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(srcID, dstID, pos);
    }
    ifaces_[i]->add(srcID, dstID, pos);
  }

  void remove(const int64_t srcID, const int64_t dstID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(srcID, dstID);
    }
    ifaces_[i]->remove(srcID, dstID);
  }

  void selectOne(std::vector<Edge> & _return, const int64_t srcID, const int64_t dstID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->selectOne(_return, srcID, dstID);
    }
    ifaces_[i]->selectOne(_return, srcID, dstID);
    return;
  }

  void selectFrom(std::vector<Edge> & _return, const int64_t srcID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->selectFrom(_return, srcID);
    }
    ifaces_[i]->selectFrom(_return, srcID);
    return;
  }

  void selectTo(std::vector<Edge> & _return, const int64_t dstID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->selectTo(_return, dstID);
    }
    ifaces_[i]->selectTo(_return, dstID);
    return;
  }

};

} // namespace

#endif
