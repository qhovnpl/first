// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "PowerStorage.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::PowerStorage;

class PowerStorageHandler : virtual public PowerStorageIf {
 public:
  PowerStorageHandler() {
    // Your initialization goes here
  }

  void add(const int64_t srcID, const int64_t dstID, const int64_t pos) {
    // Your implementation goes here
    printf("add\n");
  }

  void remove(const int64_t srcID, const int64_t dstID) {
    // Your implementation goes here
    printf("remove\n");
  }

  void selectOne(std::vector<Edge> & _return, const int64_t srcID, const int64_t dstID) {
    // Your implementation goes here
    printf("selectOne\n");
  }

  void selectFrom(std::vector<Edge> & _return, const int64_t srcID) {
    // Your implementation goes here
    printf("selectFrom\n");
  }

  void selectTo(std::vector<Edge> & _return, const int64_t dstID) {
    // Your implementation goes here
    printf("selectTo\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<PowerStorageHandler> handler(new PowerStorageHandler());
  shared_ptr<TProcessor> processor(new PowerStorageProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

